name: Build, Test, Publish, and Deploy

on:
  push:
    branches:
      - main
      - staging
      - ci
      - "*"
  workflow_dispatch:
    inputs:
      push_latest:
        description: "Also push :latest (for manual runs)"
        required: false
        default: "false"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: 920120424372
  ECR_REPO: listservice-global
  IMAGE_CONTEXT: ./listservice-backend
  DOCKERFILE: ./listservice-backend/Dockerfile
  ECS_CLUSTER: listservice-global-cluster
  ECS_SERVICE: listservice-global-service

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      ecr_repo_url: ${{ steps.vars.outputs.ecr_repo_url }}
      sha_tag: ${{ steps.resolve.outputs.sha_tag }}
      pushed_tags: ${{ steps.compose.outputs.tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920120424372:role/ListService-Global-Deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

      - name: Set variables
        id: vars
        run: |
          echo "ecr_repo_url=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}" >> "$GITHUB_OUTPUT"

      - name: Resolve branch/env and SHA
        id: resolve
        run: |
          BRANCH="${GITHUB_REF##*/}"
          case "$BRANCH" in
            staging) ENV_TAG="staging" ;;
            *)       ENV_TAG="$BRANCH" ;;
          esac
          echo "env_tag=${ENV_TAG}" >> "$GITHUB_OUTPUT"
          echo "sha_tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Compose tag list
        id: compose
        run: |
          ECR="${{ steps.vars.outputs.ecr_repo_url }}"
          SHA="${{ steps.resolve.outputs.sha_tag }}"
          ENV_TAG="${{ steps.resolve.outputs.env_tag }}"
          TAGS=("${ECR}:${SHA}" "${ECR}:ci" "${ECR}:latest")
          if [[ "${ENV_TAG}" != "ci" && "${ENV_TAG}" != "latest" ]]; then
            TAGS+=("${ECR}:${ENV_TAG}")
          fi
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.push_latest }}" == "true" ]]; then
            TAGS+=("${ECR}:latest")
          fi
          {
            echo "tags<<EOF"
            printf "%s\n" "${TAGS[@]}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (for test)
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: false
          load: true
          tags: listservice:test

      - name: Run container
        run: |
          docker run -d --rm -p 8080:8080 --name listservice-test listservice:test
          sleep 10

      - name: Run smoke tests
        run: |
          curl -f http://localhost:8080/health
          curl -f "http://localhost:8080/v1/lists/head?list=a,b,c&count=2"
          curl -s -X POST http://localhost:8080/v1/lists/tail \
            -H "Content-Type: application/json" \
            -d '{"list":["a","b","c"],"count":1}' | grep 'b'

      - name: Stop container
        if: always()
        run: docker stop listservice-test || true

      - name: Build & Push to ECR
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.compose.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920120424372:role/ListService-Global-Deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --force-new-deployment \
            --region "${AWS_REGION}"
