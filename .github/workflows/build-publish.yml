name: Build, Publish, Deploy & Test (ECS)

on:
  push:
    branches:
      - main
      - ci
      - staging
      - "*" # feature branches
  workflow_dispatch:
    inputs:
      skip_wait:
        description: "Skip waiting for service to stabilize"
        required: false
        default: "false"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: 920120424372
  ECR_REPO: listservice-global
  IMAGE_CONTEXT: ./listservice-backend
  DOCKERFILE: ./listservice-backend/Dockerfile
  CLUSTER: listservice-ci-cluster
  SERVICE: listservice-ci-svc

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      ecr_repo_url: ${{ steps.vars.outputs.ecr_repo_url }}
      sha_tag: ${{ steps.resolve.outputs.sha_tag }}
      env_tag: ${{ steps.resolve.outputs.env_tag }}
      pushed_tags: ${{ steps.compose.outputs.tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920120424372:role/ListService-Global-Deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

      - name: Set variables
        id: vars
        run: |
          echo "ecr_repo_url=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}" >> "$GITHUB_OUTPUT"

      - name: Resolve branch/env and SHA
        id: resolve
        run: |
          BRANCH="${GITHUB_REF##*/}"
          case "$BRANCH" in
            staging) ENV_TAG="staging" ;;
            *)       ENV_TAG="$BRANCH" ;;
          esac
          echo "env_tag=${ENV_TAG}" >> "$GITHUB_OUTPUT"
          echo "sha_tag=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      - name: Compose tag list (ECR only)
        id: compose
        run: |
          set -euo pipefail
          ECR="${{ steps.vars.outputs.ecr_repo_url }}"
          SHA="${{ steps.resolve.outputs.sha_tag }}"
          ENV_TAG="${{ steps.resolve.outputs.env_tag }}"
          TAGS=()

          TAGS+=("${ECR}:${SHA}")
          TAGS+=("${ECR}:ci")
          TAGS+=("${ECR}:latest")

          if [[ "${ENV_TAG}" != "ci" && "${ENV_TAG}" != "latest" ]]; then
            TAGS+=("${ECR}:${ENV_TAG}")
          fi

          {
            echo "tags<<EOF"
            printf "%s\n" "${TAGS[@]}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (ECR)
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.IMAGE_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.compose.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: ci

    outputs:
      alb_dns: ${{ steps.alb.outputs.alb_dns }}

    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920120424372:role/ListService-CI-Deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure :ci or :latest image exists in ECR
        id: image
        run: |
          if aws ecr describe-images --repository-name "${{ env.ECR_REPO }}" --image-ids imageTag=ci >/dev/null 2>&1; then
            echo "deploy_tag=ci" >> "$GITHUB_ENV"
          elif aws ecr describe-images --repository-name "${{ env.ECR_REPO }}" --image-ids imageTag=latest >/dev/null 2>&1; then
            echo "deploy_tag=latest" >> "$GITHUB_ENV"
          else
            echo "❌ No deployable image found"
            exit 1
          fi

      - name: Capture current desiredCount
        id: count
        run: |
          CUR_COUNT=$(aws ecs describe-services \
            --cluster "${{ env.CLUSTER }}" \
            --services "${{ env.SERVICE }}" \
            --query 'services[0].desiredCount' --output text)
          if [ "$CUR_COUNT" = "None" ] || [ -z "$CUR_COUNT" ]; then
            CUR_COUNT=1
          fi
          echo "desired_count=$CUR_COUNT" >> "$GITHUB_OUTPUT"

      - name: Force new deployment
        run: |
          aws ecs update-service \
            --cluster "${{ env.CLUSTER }}" \
            --service "${{ env.SERVICE }}" \
            --desired-count "${{ steps.count.outputs.desired_count }}" \
            --force-new-deployment \
            --no-cli-pager

      - name: Wait for service to be stable
        if: ${{ github.event.inputs.skip_wait != 'true' }}
        run: |
          aws ecs wait services-stable \
            --cluster "${{ env.CLUSTER }}" \
            --services "${{ env.SERVICE }}"

      - name: Get ALB DNS
        id: alb
        run: |
          # Get the Target Group ARN attached to the ECS service
          TG_ARN=$(aws ecs describe-services \
            --cluster "${{ env.CLUSTER }}" \
            --services "${{ env.SERVICE }}" \
            --query 'services[0].loadBalancers[0].targetGroupArn' \
            --output text)

          if [ "$TG_ARN" = "None" ] || [ -z "$TG_ARN" ]; then
            echo "❌ No Target Group attached to ECS service."
            exit 1
          fi

          # Find the Load Balancer ARN from the target group
          LB_ARN=$(aws elbv2 describe-target-groups \
            --target-group-arns "$TG_ARN" \
            --query 'TargetGroups[0].LoadBalancerArns[0]' \
            --output text)

          # Finally get the ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --load-balancer-arns "$LB_ARN" \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          echo "alb_dns=$ALB_DNS" >> "$GITHUB_OUTPUT"
          echo "✅ ALB DNS: $ALB_DNS"

  test:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Ensure ALB DNS exists
        run: |
          if [ -z "${{ needs.deploy.outputs.alb_dns }}" ] || [ "${{ needs.deploy.outputs.alb_dns }}" = "None" ]; then
            echo "❌ No ALB DNS found. Cannot run tests."
            exit 1
          fi

      - name: Test /health (GET)
        run: |
          URL="http://${{ needs.deploy.outputs.alb_dns }}/health"
          for i in {1..18}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            if [ "$code" = "200" ]; then
              echo "✅ /health OK"
              break
            fi
            echo "Attempt $i: got $code; retrying in 10s..."
            sleep 10
          done

      - name: Test /v1/lists/head (GET)
        run: |
          URL="http://${{ needs.deploy.outputs.alb_dns }}/v1/lists/head?list=foo,bar,baz&count=2"
          RESPONSE=$(curl -s "$URL")
          EXPECTED='{"result":["foo","bar"]}'
          [ "$RESPONSE" = "$EXPECTED" ] || (echo "❌ Expected $EXPECTED, got $RESPONSE" && exit 1)
          echo "✅ /head GET passed"

      - name: Test /v1/lists/tail (GET)
        run: |
          URL="http://${{ needs.deploy.outputs.alb_dns }}/v1/lists/tail?list=foo,bar,baz&count=1"
          RESPONSE=$(curl -s "$URL")
          EXPECTED='{"result":["baz"]}'
          [ "$RESPONSE" = "$EXPECTED" ] || (echo "❌ Expected $EXPECTED, got $RESPONSE" && exit 1)
          echo "✅ /tail GET passed"

      - name: Test /v1/lists/head (POST)
        run: |
          URL="http://${{ needs.deploy.outputs.alb_dns }}/v1/lists/head"
          RESPONSE=$(curl -s -X POST -H 'Content-Type: application/json' \
            -d '{"list":["one","two","three"],"count":2}' "$URL")
          EXPECTED='{"result":["one","two"]}'
          [ "$RESPONSE" = "$EXPECTED" ] || (echo "❌ Expected $EXPECTED, got $RESPONSE" && exit 1)
          echo "✅ /head POST passed"

      - name: Test /v1/lists/tail (POST)
        run: |
          URL="http://${{ needs.deploy.outputs.alb_dns }}/v1/lists/tail"
          RESPONSE=$(curl -s -X POST -H 'Content-Type: application/json' \
            -d '{"list":["one","two","three"],"count":1}' "$URL")
          EXPECTED='{"result":["three"]}'
          [ "$RESPONSE" = "$EXPECTED" ] || (echo "❌ Expected $EXPECTED, got $RESPONSE" && exit 1)
          echo "✅ /tail POST passed"
