name: Build and Publish to ECR

on:
  push:
    branches:
      - main
      - ci
      - staging
      - "*"        # feature branches
  workflow_dispatch:
    inputs:
      env_tag:
        description: "Tag to apply (auto=derive from branch)"
        type: choice
        required: false
        default: auto
        options: [auto, latest, ci, staging, custom]
      custom_tag:
        description: "Custom tag value when env_tag=custom"
        type: string
        required: false
        default: ""
      sha_tag:
        description: "Override image SHA tag (defaults to commit SHA)"
        type: string
        required: false
        default: ""
      push_latest_ecr:
        description: "Push :latest to ECR (only if repo is MUTABLE)"
        type: boolean
        required: false
        default: false

permissions:
  id-token: write     # for AWS OIDC
  contents: read

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: 920120424372
  ECR_REPO: listservice-global
  IMAGE_NAME: listservice

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      sha_tag: ${{ steps.resolve.outputs.sha_tag }}
      env_tag: ${{ steps.resolve.outputs.env_tag }}
      ecr_repo_url: ${{ steps.vars.outputs.ecr_repo_url }}
      ecr_image_uri_sha: ${{ steps.compose.outputs.ecr_image_uri_sha }}
      ecr_image_uri_latest: ${{ steps.compose.outputs.ecr_image_uri_latest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920120424372:role/ListService-Global-Deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Resolve tags (env & sha)
        id: resolve
        shell: bash
        run: |
          # Resolve env tag
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.env_tag }}" != "auto" ]]; then
            case "${{ inputs.env_tag }}" in
              latest|ci|staging) ENV_TAG="${{ inputs.env_tag }}" ;;
              custom) ENV_TAG="${{ inputs.custom_tag }}" ;;
              *) echo "Invalid env_tag"; exit 1 ;;
            esac
          else
            BRANCH="${GITHUB_REF##*/}"
            case "$BRANCH" in
              main)    ENV_TAG="latest" ;;
              ci)      ENV_TAG="ci" ;;
              staging) ENV_TAG="staging" ;;
              *)       ENV_TAG="$BRANCH" ;;
            esac
          fi

          # Resolve sha tag
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.sha_tag }}" ]]; then
            SHA_TAG="${{ inputs.sha_tag }}"
          else
            SHA_TAG="${GITHUB_SHA}"
          fi

          echo "env_tag=$ENV_TAG"  >> "$GITHUB_OUTPUT"
          echo "sha_tag=$SHA_TAG"  >> "$GITHUB_OUTPUT"

          # Latest toggle
          PUSH_LATEST_ECR="${{ inputs.push_latest_ecr }}"
          if [[ "${GITHUB_REF##*/}" == "main" && "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            # Set true ONLY if repo is MUTABLE
            PUSH_LATEST_ECR=true
          fi
          echo "push_latest_ecr=$PUSH_LATEST_ECR" >> "$GITHUB_OUTPUT"

      - name: Set common vars
        id: vars
        run: |
          echo "ecr_repo_url=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compose tag list
        id: compose
        shell: bash
        run: |
          ECR_SHA="${{ steps.vars.outputs.ecr_repo_url }}:${{ steps.resolve.outputs.sha_tag }}"
          echo "ecr_image_uri_sha=$ECR_SHA" >> "$GITHUB_OUTPUT"

          TAGS=("$ECR_SHA")
          if [[ "${{ steps.resolve.outputs.push_latest_ecr }}" == "true" ]]; then
            ECR_LATEST="${{ steps.vars.outputs.ecr_repo_url }}:latest"
            TAGS+=("$ECR_LATEST")
            echo "ecr_image_uri_latest=$ECR_LATEST" >> "$GITHUB_OUTPUT"
          fi

          printf "tags<<'EOF'\n%s\nEOF\n" "$(printf "%s\n" "${TAGS[@]}")" >> "$GITHUB_OUTPUT"

      - name: Build and Push to ECR
        uses: docker/build-push-action@v6
        with:
          context: ./listservice
          file: ./listservice/Dockerfile.ecs
          platforms: linux/amd64
          push: true
          tags: ${{ steps.compose.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
