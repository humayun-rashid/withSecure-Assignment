name: Deploy to ECS (CI)

on:
  workflow_dispatch:
    inputs:
      image_sha:
        description: 'Image SHA to deploy (defaults to last build SHA)'
        required: false
  workflow_run:
    workflows: ["Build and Publish Container"]
    types: [completed]
    branches: [main]   # deploy only after main builds

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  CLUSTER: listservice-ci-cluster
  SERVICE: listservice-ci-svc
  CONTAINER_NAME: app
  ECR_REPO: listservice-global
  AWS_ACCOUNT_ID: 920120424372

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: ci

    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920120424372:role/ListService-CI-Deploy
          aws-region: ${{ env.AWS_REGION }}

      # Figure out which SHA to deploy
      - name: Resolve image SHA
        id: pick
        run: |
          if [ -n "${{ github.event.inputs.image_sha || '' }}" ]; then
            echo "sha=${{ github.event.inputs.image_sha }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          else
            echo "No SHA found. Provide image_sha input." >&2
            exit 1
          fi

      # Get current task definition ARN from service
      - name: Get current task definition
        id: cur
        run: |
          TD_ARN=$(aws ecs describe-services \
            --cluster "${{ env.CLUSTER }}" \
            --services "${{ env.SERVICE }}" \
            --query "services[0].taskDefinition" \
            --output text)
          echo "task_def_arn=$TD_ARN" >> $GITHUB_OUTPUT
          echo "Current task def: $TD_ARN"

      # Download task definition JSON
      - name: Download task definition JSON
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ steps.cur.outputs.task_def_arn }}" \
            --query "taskDefinition" > td.json
          cat td.json

      # Create new task definition with new image
      - name: Create new task definition with new image
        id: new
        run: |
          IMG="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ steps.pick.outputs.sha }}"
          echo "Using image: $IMG"

          # Replace container image by container name
          NEW_TD_PAYLOAD="$(jq --arg IMG "$IMG" --arg NAME "${{ env.CONTAINER_NAME }}" '
            .containerDefinitions |= map(if .name == $NAME then .image = $IMG else . end)
            | {
                family,
                taskRoleArn,
                executionRoleArn,
                networkMode,
                containerDefinitions,
                volumes,
                placementConstraints,
                requiresCompatibilities,
                cpu,
                memory,
                runtimePlatform,
                ephemeralStorage
              }
          ' td.json)"

          echo "$NEW_TD_PAYLOAD" > td-new.json

          aws ecs register-task-definition \
            --cli-input-json file://td-new.json > reg.json

          NEW_ARN=$(jq -r .taskDefinition.taskDefinitionArn reg.json)
          echo "new_td_arn=$NEW_ARN" >> $GITHUB_OUTPUT
          echo "Registered new TD: $NEW_ARN"

      # Update service
      - name: Update service to new task def
        run: |
          aws ecs update-service \
            --cluster "${{ env.CLUSTER }}" \
            --service "${{ env.SERVICE }}" \
            --task-definition "${{ steps.new.outputs.new_td_arn }}" \
            --force-new-deployment \
            --no-cli-pager

      # Wait until stable
      - name: Wait for service stable
        run: |
          aws ecs wait services-stable \
            --cluster "${{ env.CLUSTER }}" \
            --services "${{ env.SERVICE }}"
          echo "âœ… CI service is stable."

      # Optional smoke test
      - name: Quick smoke test
        run: |
          echo "Deploy finished. Run smoke tests here (curl ALB /health, etc)."
