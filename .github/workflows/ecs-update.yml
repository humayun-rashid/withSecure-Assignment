name: Deploy to ECS (CI)

on:
  workflow_dispatch:
    inputs:
      image_sha:
        description: 'Image SHA to deploy (defaults to last build SHA)'
        required: false
  workflow_run:
    workflows: ["Build and Publish Container"]
    types: [completed]
    branches: [main]   # deploy only after main builds

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  CLUSTER: listservice-ci-cluster
  SERVICE: listservice-ci-svc
  ECR_REPO: listservice-global
  AWS_ACCOUNT_ID: 920120424372

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    environment: ci

    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::920120424372:role/ListService-CI-Deploy
          aws-region: ${{ env.AWS_REGION }}

      # Figure out which SHA to deploy:
      # - if manually provided, use that
      # - else pull the last successful workflow_run’s SHA
      - name: Resolve image SHA
        id: pick
        run: |
          if [ -n "${{ github.event.inputs.image_sha || '' }}" ]; then
            echo "sha=${{ github.event.inputs.image_sha }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
          else
            echo "No SHA found. Provide image_sha input." >&2
            exit 1
          fi

      - name: Get current task definition
        id: cur
        run: |
          aws ecs describe-task-definition --task-definition "${{ env.SERVICE }}" \
            --query 'taskDefinition' > td.json
          cat td.json

      - name: Create new task definition with new image
        id: new
        run: |
          IMG="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ steps.pick.outputs.sha }}"
          echo "Using image: $IMG"
          # patch container image (assumes 1 container named 'app' in the task def)
          jq --arg IMG "$IMG" '
            .containerDefinitions[0].image = $IMG
          ' td.json > td-new.json

          FAMILY=$(jq -r .family td.json)
          aws ecs register-task-definition \
            --family "$FAMILY" \
            --requires-compatibilities FARGATE \
            --cpu "$(jq -r .cpu td.json)" \
            --memory "$(jq -r .memory td.json)" \
            --network-mode "$(jq -r .networkMode td.json)" \
            --execution-role-arn "$(jq -r .executionRoleArn td.json)" \
            --task-role-arn "$(jq -r .taskRoleArn td.json)" \
            --runtime-platform "$(jq -c .runtimePlatform td.json)" \
            --container-definitions "file://td-new.json" \
            --tags Key=ManagedBy,Value=GitHub > reg.json

          NEW_ARN=$(jq -r .taskDefinition.taskDefinitionArn reg.json)
          echo "new_td_arn=$NEW_ARN" >> $GITHUB_OUTPUT

      - name: Update service to new task def
        run: |
          aws ecs update-service \
            --cluster "${{ env.CLUSTER }}" \
            --service "${{ env.SERVICE }}" \
            --task-definition "${{ steps.new.outputs.new_td_arn }}" \
            --force-new-deployment \
            --no-cli-pager

      - name: Wait for service stable
        run: |
          aws ecs wait services-stable \
            --cluster "${{ env.CLUSTER }}" \
            --services "${{ env.SERVICE }}"
          echo "✅ CI service is stable."

      - name: Quick smoke test
        run: |
          # Requires your CI Terraform to output alb_dns
          # If not available here, you can curl the ALB you know.
          echo "Deploy finished. (Run your external smoke tests here.)"
